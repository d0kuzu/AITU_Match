from pathlib import Path

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile

from src.states import UserRoadmap
from src.service.db_service import ServiceDB
from src.keyboards.reply import welcome_keyboard, sex_selection_horizontal_keyboard
from src.config import settings


WELCOME_TEXT = """
*–ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç!*   

*Aitu MATCH* - —ç—Ç–æ –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ —Å—Ä–µ–¥–∏ –∞–π—Ç—É—à–Ω–∏–∫–æ–≤ ‚Äî –Ω–∞—Ö–æ–¥–∏ –¥—Ä—É–∑–µ–π, –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏–ª–∏ –¥–∞–∂–µ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É!  

‚ú® *–ß—Ç–æ —Ç—É—Ç –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å?*  
‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö —Ä–µ–±—è—Ç üïµüèø‚Äç‚ôÇÔ∏è
‚Ä¢ –ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π üéì
‚Ä¢ –û–±—â–∞—Ç—å—Å—è —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º ü•∂ 

_–ù–∞–∂–º–∏ *"–ù–∞—á–∞—Ç—å"*, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ!_ 
"""


BASE_DIR = Path(__file__).resolve().parent.parent
STATIC_DIR = BASE_DIR / "static"

WELCOME_IMAGE = FSInputFile(STATIC_DIR / "bot" / "welcome.jpeg")


commands_router = Router()


@commands_router.message(CommandStart())
async def command_start(message: Message, state: FSMContext):
    await message.answer_photo(
        photo=WELCOME_IMAGE,
        caption=WELCOME_TEXT,
        reply_markup=welcome_keyboard(),
        parse_mode="Markdown",
    )


    if await ServiceDB.is_user_exist_by_tgid(message.from_user.id):
        await state.set_state(UserRoadmap.main_menu)
    else:
        await state.set_state(UserRoadmap.get_token)
    # await state.set_state(StartStates.start)


@commands_router.message(Command("init"))
async def command_init(message: Message, state: FSMContext):
    """Initialize the first user (admin)"""
    if message.from_user.id != settings.ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    try:
        # Check if user already exists
        if await ServiceDB.is_user_exist_by_tgid(message.from_user.id):
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
            
        # Create first user
        invite_token = await ServiceDB.create_first_user(message.from_user.id)
        await message.answer(
            f"‚úÖ –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–í–∞—à –∏–Ω–≤–∞–π—Ç-–∫–æ–¥: `{invite_token}`\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!",
            parse_mode="Markdown"
        )
        await state.set_state(UserRoadmap.main_menu)
    except Exception as e:
        print(f"Error creating first user: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


@commands_router.message(Command("debug"))
async def command_debug(message: Message, state: FSMContext):
    """Debug command to check user status"""
    if message.from_user.id != settings.ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    try:
        user = await ServiceDB.get_user_by_tgid(message.from_user.id)
        if user:
            await message.answer(
                f"üîç Debug info:\n\n"
                f"User ID: {user.user_id}\n"
                f"TG ID: {user.tg_id}\n"
                f"Invites: {user.invites}\n"
                f"Invite Code: `{user.invite_code}`",
                parse_mode="Markdown"
            )
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        print(f"Error in debug command: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
